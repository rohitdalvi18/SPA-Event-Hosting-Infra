name: Nightly Deployment Routine

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  initialize:
    runs-on: ubuntu-latest
    steps:
      - name: üõ†Ô∏è Checkout Infra Repository
        uses: actions/checkout@v3
        with:
          repository: rohitdalvi18/SPA-Event-Hosting-Infra
          token: ${{ secrets.ACCESS_TOKEN }}
          path: infra-repo
      - run: echo "‚úÖ Successfully checked out Infra repo."

      - name: üìÇ Checkout Source Code Repository
        uses: actions/checkout@v3
        with:
          repository: rohitdalvi18/SPA-Event-Hosting
          token: ${{ secrets.ACCESS_TOKEN }}
          path: source-repo
      - run: echo "‚úÖ Source repo cloned successfully."

  build-and-save:
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Setting Up Docker Build Environment
        uses: docker/setup-buildx-action@v2

      - name: üî® Build Docker Images
        run: |
          cd spa-project/backend
          docker build -t backend-app:latest .
          cd ../frontend
          docker build -t frontend-app:latest .
      - run: echo "‚úÖ Built both backend and frontend Docker images."

      - name: üì¶ Save Docker Images
        run: |
          docker save -o backend-app.tar backend-app:latest
          docker save -o frontend-app.tar frontend-app:latest
      - run: echo "‚úÖ Docker images saved as tar files."

  launch-temp-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: üîß Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: ‚òÅÔ∏è Spin Up Temporary EC2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ secrets.AWS_AMI_ID }} \
            --instance-type t2.micro \
            --key-name keypair \
            --security-group-ids ${{ secrets.AWS_SECURITY_GROUP }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=TempTestEC2}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "üÜï Temporary EC2 Created: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: üåç Fetch Public IP of Temporary EC2
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "üåé EC2 Public IP: $PUBLIC_IP"
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

  smoke-test:
    runs-on: ubuntu-latest
    needs: launch-temp-ec2
    steps:
      - name: Set up SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/my-key.pem
          chmod 600 ~/.ssh/my-key.pem

      - name: üõ†Ô∏è Set Up Temporary EC2 Environment
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/keypair.pem ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user
          EOF
          echo "‚úÖ EC2 environment configured successfully."

      - name: üì§ Transfer Docker Images to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem backend-app.tar ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem frontend-app.tar ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem infra-repo/docker-compose.prod.yml ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/

          echo "‚úÖ Docker images transferred to EC2."

      - name: üîë SSH into EC2 and set up environment variables
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
            echo "RDS_HOST=${{ secrets.RDS_HOST }}" >> /home/ec2-user/.env
            echo "RDS_USER=${{ secrets.RDS_USER }}" >> /home/ec2-user/.env
            echo "RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> /home/ec2-user/.env
            echo "RDS_NAME=${{ secrets.RDS_NAME }}" >> /home/ec2-user/.env
            echo "RDS_PORT=${{ secrets.RDS_PORT }}" >> /home/ec2-user/.env
            echo "API_BASE_URL=${{ secrets.API_BASE_URL }}" >> /home/ec2-user/.env
          EOF
    
      - name: üõ∏ Start containers with docker-compose
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
            docker load -i /home/ec2-user/backend-app.tar
            docker load -i /home/ec2-user/frontend-app.tar
            docker-compose -f /home/ec2-user/docker-compose.prod.yml --env-file /home/ec2-user/.env up -d
          EOF

      - name: üöÄ Run Smoke Tests on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
            echo "Running smoke tests..."

            FRONTEND_URL="http://localhost:5173"
            for i in {1..10}; do
              RESPONSE=$(curl -s $FRONTEND_URL)
              if echo "$RESPONSE" | grep -q "<title>SF Events Listing</title>"; then
                echo "‚úÖ Smoke test for frontend executed successfully!"
                break
              fi
              echo "Retrying in 1 second..."
              sleep 1
            done

            if ! echo "$RESPONSE" | grep -q "<title>SF Events Listing</title>"; then
              echo "‚ùå Smoke test for frontend failed!"
              exit 1
            fi

            # Backend Smoke Test
            BACKEND_URL="http://localhost:8800/"
            echo "Testing backend at $BACKEND_URL"
            if curl -s -o /dev/null -I -w "%{http_code}" $BACKEND_URL | grep -q "200"; then
              echo "‚úÖ Smoke test for backend executed successfully!"
            else
              echo "‚ùå Smoke test for backend failed!"
              exit 1
            fi
          EOF

      - name: üî• Terminate Temporary EC2 Instance
        run: |
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          echo "‚úÖ Temporary EC2 instance terminated."

  push-to-ecr:
    runs-on: ubuntu-latest
    needs: smoke-test
    if: success()
    steps:
      - name: üîë Log into AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPO_FRONTEND }}
          echo "‚úÖ Logged into AWS ECR."

      - name: üè∑Ô∏è Tag & Push Docker Images to ECR
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")

          docker tag backend-app:latest ${{ secrets.AWS_ECR_REPO_BACKEND }}:backend-$TIMESTAMP
          docker tag backend-app:latest ${{ secrets.AWS_ECR_REPO_FRONTEND }}:backend-latest

          docker tag frontend-app:latest ${{ secrets.AWS_ECR_REPO_FRONTEND }}:frontend-$TIMESTAMP
          docker tag frontend-app:latest ${{ secrets.AWS_ECR_REPO_FRONTEND }}:frontend-latest

          docker push ${{ secrets.AWS_ECR_REPO_FRONTEND }}:backend-$TIMESTAMP
          docker push ${{ secrets.AWS_ECR_REPO_FRONTEND }}:backend-latest

          docker push ${{ secrets.AWS_ECR_REPO_FRONTEND }}:frontend-$TIMESTAMP
          docker push ${{ secrets.AWS_ECR_REPO_FRONTEND }}:frontend-latest
          
          "‚úÖ Docker images pushed to ECR successfully."

  deploy-to-qa:
    runs-on: ubuntu-latest
    needs: push-to-ecr
    steps:
      - name: üöÄ Deploy to QA EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ secrets.QA_EC2_IP }} << 'EOF'
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user
      
            echo "Docker installed successfully!"
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            docker-compose --version
      
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
      
            echo "Logging in to AWS ECR..."
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 793261838120.dkr.ecr.us-east-1.amazonaws.com
      
            export AWS_ECR_REPO=${{ secrets.AWS_ECR_REPO_BACKEND }}
            echo "ECR Repo URL: $AWS_ECR_REPO"

            export AWS_ECR_REPO=${{ secrets.AWS_ECR_REPO_BACKEND }}
            echo "ECR Repo URL: $AWS_ECR_REPO"

            docker pull $AWS_ECR_REPO:backend-latest
            docker pull $AWS_ECR_REPO:frontend-latest
          
            export RDS_HOST=${{ secrets.RDS_HOST }}
            export RDS_USER=${{ secrets.RDS_USER }}
            export RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}
            export RDS_NAME=${{ secrets.RDS_NAME }}
            export RDS_PORT=${{ secrets.RDS_PORT }}
            export FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          
            echo "Checking for docker-compose.qa.yml..."
            if [ ! -f docker-compose.qa.yml ]; then
              cp /home/ec2-user/infra-repo/docker-compose.prod.yml /home/ec2-user/docker-compose.qa.yml
            fi

            docker-compose -f docker-compose.qa.yml up -d

            echo "Deployment to QA EC2 successful!"
          EOF